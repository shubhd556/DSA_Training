// Problem : https://leetcode.com/problems/majority-element-ii/

//My solution using map runtime: 8ms memory : 15MB

vector<int> majorityElement(vector<int>& nums) {
        unordered_map<int,int>v;
        int max=0,res=-1;
        int n = nums.size()/3;
        vector<int>k;
        for(int i=0;i<nums.size();i++){
            v[nums[i]]++;
        }
        for(auto it:v){
            if(it.second>n){
                k.push_back(it.first);
            }
        }
        return k;
    }

// Another approach

vector<int> majorityElement(vector<int>& nums) {
        int num1 =-1, num2=-1,c1=0,c2=0,i;
        int n =nums.size();
        vector<int>k;
        for(int i=0;i<n;i++){
           if(nums[i]==num1){
               c1++;
           }
            else if(nums[i]==num2){
                c2++;
            }
            else if(c1==0){
                num1=nums[i];
                c1=1;
            }
            else if(c2==0){
                num2=nums[i];
                c2=1;
            }
            else{
                c1--;
                c2--;
            }
        }
        c1=c2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==num1){
                c1++;
            }
            else if(nums[i]==num2){
                c2++;
            }
        }
        if(c1>n/3){
            k.push_back(num1);
        }
        if(c2>n/3){
            k.push_back(num2);
        }
        return k;
    }