//Problem : https://leetcode.com/problems/unique-paths/

// Using Combinations BEST solution

int uniquePaths(int m, int n) {
        int N = n+m-2;
        int r = m-1;
        double res =1;
        for(int i=1;i<=r;i++){
            res = res*(N -r+i)/i;
        }
        return (int)res;
    }

// DP solution

int uniquePaths(int m, int n) {
        int dp[n][m];
        dp[0][0] = 1;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(i == 0 || j == 0)    dp[i][j] = 1;
                else{
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
                
            }
        }
        return dp[n-1][m-1];        
    }

//DP solution 2 

int uniquePaths(int m, int n) {
		vector<int> DP(n, 1);

		for (int r = 1; r < m; r++) {
			for (int c = 1; c < n; c++) {
				DP[c] += DP[c - 1];
			}
		}
		return DP[n - 1];
	}