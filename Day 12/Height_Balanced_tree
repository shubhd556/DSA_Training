#include <bits/stdc++.h>
using namespace std;


struct Node
    {
        int data;
        struct Node* left;
        struct Node* right;

        Node(int val){
            data=val;
            left=NULL;
            right=NULL;
        }
    };



int Height(Node* root){
    if(root==NULL){
        return 0;
    }
    int lheight = Height(root->left);
    int rheight = Height(root->right);
    return max(lheight,rheight)+1;
}



int balancedtree(Node* root){
    if(root==NULL){
        return 0;
    }
    if(balancedtree(root->left)==NULL){
        return 0;
    }
     if(balancedtree(root->right)==NULL){
        return 0;
    }
    int lheight = Height(root->left);
    int rheight = Height(root->right);
    if(abs(lheight-rheight)<=1){
        return 1;
    }
    else return 0;
}

int main() {

    struct Node* root = new Node(1);
    root->left = new Node(2);
    root->right= new Node(3);

    root->left->left= new Node(4);
    root->left->right = new Node(5);
    root->right->left= new Node(6);
    root->right->right = new Node(7);

    cout<<Height(root)<<endl;
    cout<<Diameter(root)<<endl;
    cout<<balancedtree(root)<<endl;
    return 0;
}