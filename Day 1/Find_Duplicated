//Problem: https://leetcode.com/problems/find-the-duplicate-number/



//Approach 1 BF

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       for (std::size_t i = 0; i < nums.size(); ++i) {
        for (std::size_t j = i + 1; j < nums.size(); ++j) {
            if (nums[i] == nums[j])
                return nums[i];
        }
    }
    return 0;
    }
};



//Approach 2 : Optimal without extra space and with O(n) with cyclic iterator

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        
        fast = nums[0];
        while(slow!=fast){
            slow = nums[slow];
            fast = nums[fast];       
        }
        return slow;
    }
    
};