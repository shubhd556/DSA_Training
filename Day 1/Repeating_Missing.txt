//Problem 2: https://www.geeksforgeeks.org/find-a-repeating-and-a-missing-number/

//Approach 1: Basic/BF

void printTwoEle(int arr[],int n){
    int m=0,r=0;
	sort(arr,arr+n);
	for(int i=arr[0];i<arr[n-1];i++){
	    
	    if(i!=arr[i]){
	        m=i;
	    }
	    if(arr[i]==arr[i-1]){
			r=arr[i];
		}
	}
    cout << "Repeating = " << r<<endl;
	cout << "Missing = " << m;
}


//Approach 2: Optimal O(n) With Sum of elements 


vector<int>repeatedNumber(const vector<int> &A) {
    long long int len = A.size();
    long long int Sum_N = (len * (len+1) ) /2, Sum_NSq = (len * (len +1) *(2*len +1) )/6;
    long long int missingNumber=0, repeating=0;
      
    for(int i=0;i<A.size(); i++){
       Sum_N -= (long long int)A[i];
       Sum_NSq -= (long long int)A[i]*(long long int)A[i];
    }
      
    missingNumber = (Sum_N + Sum_NSq/Sum_N)/2;
    repeating= missingNumber - Sum_N;
    vector <int> ans;
    ans.push_back(repeating);
    ans.push_back(missingNumber);
    return ans;
      
}


