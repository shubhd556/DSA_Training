#include <bits/stdc++.h>
using namespace std;


struct Node
    {
        int data;
        struct Node* left;
        struct Node* right;

        Node(int val){
            data=val;
            left=NULL;
            right=NULL;
        }
    };

//Tree traversal the easiest part
void preorder(struct Node* root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}
void inorder(struct Node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
     cout<<root->data<<" ";
    inorder(root->right);
}
void postorder(struct Node* root){
    if(root==NULL){
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}

int search(int inor[], int start, int end ,int curr){
    for(int i=start;i<=end;i++){
        if(inor[i]==curr){
            return i;
        }
    }
    return -1;
}


void printLevel(Node* root){
    if(root==NULL){
        return;
    }
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node* node = q.front();
        q.pop();
        if(node!=NULL){
            cout<<node->data;
            if(node->left){
                q.push(node->left);
            }
            if(node->right){
                q.push(node->right);
            }
        }
        else if(!q.empty()){
           q.push(NULL); 
        }
    }
}


//Finding sum at kth level

int sumAtk(Node* root,int K){
    if(root==NULL){
        return -1;
    }
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    int level =0;
    int sum =0;
    while(!q.empty()){
        Node * node =  q.front();
        q.pop();
        if(node!= NULL){
            if(level==K){
                sum+=node->data;
            }
            if(node->left){
                q.push(node->left);
            }
            if(node->right){
                q.push(node->right);
            }
        }
        else if(!q.empty()){
           q.push(NULL); 
           level++;
        }
    }
    return sum;
    }





int main() {

    struct Node* root = new Node(1);
    root->left = new Node(2);
    root->right= new Node(3);

    root->left->left= new Node(4);
    root->left->right = new Node(5);
    root->right->left= new Node(6);
    root->right->right = new Node(7);
    printLevel(root);
    cout<<"\n"<<sumAtk(root,2);

    return 0;
}