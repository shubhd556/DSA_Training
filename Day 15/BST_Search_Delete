// Search Traverse and Delete in BST


#include <bits/stdc++.h>
using namespace std;


struct Node
    {
        int data;
        struct Node* left;
        struct Node* right;

        Node(int val){
            data=val;
            left=NULL;
            right=NULL;
        }
    };

Node* insertBST(Node* root, int val){
    if(root==NULL){
        return new Node(val);
    }
    if(val<root->data){
        root->left= insertBST(root->left,val);
    }
    else{
        root->right = insertBST(root->right,val);
    }
    return root;
}


Node* searchnode(Node*root,int key){
    if(root==NULL){
        return NULL;
    }
    if(root->data==key){
        return root;
    }
    if(root->data>key){
        return searchnode(root->left,key);
    }
    return searchnode(root->right,key);
}

Node* inorderSucc(Node* root){
    Node* curr = root;
    while(curr&& curr->left !=NULL){
        curr=curr->left;
    }
    return curr;
}



Node* DeleteinBST(Node*root, int key){
    if(root==NULL){
        return NULL;
    }
    if(key<root->data){
        root->left = DeleteinBST(root->left,key);
    }
    else if(key>root->data){
        root->right = DeleteinBST(root->right,key);
    }
    else{
        if(root->left== NULL){
            Node* temp = root->right;
            free(root);
            return temp;
        }
        else if(root->right==NULL){
            Node* temp = root->left;
            free(root);
            return temp;
        }

        Node* temp = inorderSucc(root->right);
        root->data = temp->data;
        root->right = DeleteinBST(root->right,temp->data);

    }
   return root;
}


void preorder( Node* root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

void inorder(Node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data;
    inorder(root->right);
}

int main() {

    Node* root = NULL;
    root = insertBST(root,5);
    insertBST(root,1);
    insertBST(root,3);
    insertBST(root,4);
    insertBST(root,2);
    insertBST(root,6);
    insertBST(root,7);
    inorder(root);
    if(searchnode(root,10)==NULL){
        cout<<"\nKey Not Present";
    }
    else{
        cout<<"\nKey Found";
    }
    return 0;
}